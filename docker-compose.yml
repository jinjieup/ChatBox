version: '3'
services:
  # MySQL 服务
  mysql_gpt:
    image: hncboy/chatgpt-web-java-mysql:latest
    container_name: mysql_gpt
#    ports:
#      - 3309:3306
    volumes:
      - ~/mydata/mysql/data:/var/lib/mysql #数据文件挂载
      - ~/mydata/mysql/conf:/etc/mysql/conf.d #配置文件挂载
      - ~/mydata/mysql/log:/var/log/mysql #日志文件挂载
    networks:
      gpt_network:
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping" , "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 5

  # Java 服务
  java_gpt:
    image: hncboy/chatgpt-web-java:latest
    container_name: java_gpt
    environment:
      # 这里要用 mysql_gpt 的 3306 端口
      - JDBC_URL=jdbc:mysql://mysql_gpt:3306/chat?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
      - MYSQL_USER_NAME=root
      - MYSQL_PASSWORD=123456
      - CHAT_OPENAI_API_KEY=
      - CHAT_OPENAI_ACCESS_TOKEN=
      - CHAT_OPENAI_API_BASE_URL=https://api.openai.com/
      - CHAT_HTTP_PROXY_HOST=127.0.0.1
      - EMAIL_HOST=
      - EMAIL_PORT=
      - EMAIL_FROM=
      - EMAIL_USER=
      - EMAIL_PASS=
    ports:
      - 3002:3002
    depends_on:
      - mysql_gpt
    restart: on-failure
    networks:
      gpt_network:

  # admin 服务
  admin_service_1:
    container_name: admin_service_1
    build:
      context: .
      dockerfile: Dockerfile_admin
    networks:
      - admin-network

  admin_service_2:
    container_name: admin_service_2
    build:
      context: .
      dockerfile: Dockerfile_admin
    networks:
      - admin-network
      
  admin_service_3:
    container_name: admin_service_3
    build:
      context: .
      dockerfile: Dockerfile_admin
    networks:
      - admin-network


  # user 服务
  user_service_1:
    container_name: user_service_1
    build:
      context: .
      dockerfile: Dockerfile_user
    networks:
      - user-network

  user_service_2:
    container_name: user_service_2
    build:
      context: .
      dockerfile: Dockerfile_user
    networks:
      - user-network
      
  user_service_3:
    container_name: user_service_3
    build:
      context: .
      dockerfile: Dockerfile_user
    networks:
      - user-network

  # nginx 服务
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - admin-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

networks:
  gpt_network:
  admin_network:
  user_network: